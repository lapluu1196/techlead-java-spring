-- LEVEL 1
-- 1. Write a SQL query to return the first and last names
-- of all actors in the database.
SELECT actor.first_name, actor.last_name
FROM actor;

-- 2. Write a SQL query to return the titles of all films in the database,
-- along with their rental rates and replacement costs.
SELECT film.title, film.rental_rate, film.replacement_cost
FROM film;

-- 3. Write a SQL query to return the top 5 most rented films in the database,
-- along with the number of times they have been rented.
SELECT film.title, count(rental.rental_id) AS rental_count
FROM film
         JOIN inventory ON film.film_id = inventory.film_id
         JOIN rental ON inventory.inventory_id = rental.inventory_id
GROUP BY film.title
ORDER BY rental_count DESC limit 5;

-- 4. Write a SQL query to return the average rental duration
-- for each category of film in the database.
SELECT c.name AS category_name, AVG(f.rental_duration) AS avg_rental_duration
FROM film f
         JOIN film_category fc ON f.film_id = fc.film_id
         JOIN category c ON fc.category_id = c.category_id
GROUP BY c.name;

-- 5. Write a SQL query to return the names and addresses of all customers
-- who have rented a film in the month of January 2022.
SELECT c.first_name, c.last_name, a.address, a.address2, a.district, a.city_id, a.postal_code, a.phone
FROM customer c
         JOIN address a ON c.address_id = a.address_id
         JOIN rental r ON c.customer_id = r.customer_id
WHERE r.rental_date BETWEEN '2022-01-01' AND '2022-01-31';

-- 6. Write a SQL query to return the revenue generated by each
-- store in the database for the year 2021.
SELECT s.store_id, SUM(p.amount) AS revenue
FROM store s
         JOIN staff st ON s.store_id = st.store.store_id
         JOIN payment p ON st.staff_id = p.staff_id
WHERE YEAR(p.payment_date) = 2021
GROUP BY s.store_id;

-- 7. Write a SQL query to return the names of all actors
-- who have appeared in more than 20 films in the database.
SELECT a.first_name, a.last_name, COUNT(fa.film_id) AS film_count
FROM actor a
         JOIN film_actor fa ON a.actor_id = fa.actor_id
GROUP BY a.actor_id, a.first_name, a.last_name
HAVING COUNT(fa.film_id) > 20;

-- 8. Write a SQL query to return the titles of all films in the database
-- that have a rating of 'PG-13' and a length of more than 120 minutes.
SELECT title
FROM film
WHERE rating = 'PG-13'
  AND length > 120;

-- LEVEL 2
-- 1. Write a SQL query to return the top 10 customers who have generated the
-- most revenue for the store, including their names and total revenue generated.
SELECT c.first_name, c.last_name, SUM(p.amount) AS total_revenue
FROM customer c
         JOIN payment p ON c.customer_id = p.customer_id
GROUP BY c.customer_id, c.first_name, c.last_name
ORDER BY total_revenue DESC
    LIMIT 10;

-- 2. Write a SQL query to return the names and contact information of all customers
-- who have rented films in all categories in the database.
SELECT c.first_name, c.last_name, a.address, a.phone
FROM customer c
         JOIN address a ON c.address_id = a.address_id
         JOIN rental r ON c.customer_id = r.customer_id
         JOIN inventory i ON r.inventory_id = i.inventory_id
         JOIN film f ON i.film_id = f.film_id
         JOIN film_category fc ON f.film_id = fc.film_id
         JOIN category cat ON fc.category_id = cat.category_id
GROUP BY c.customer_id, c.first_name, c.last_name, a.address, a.phone
HAVING COUNT(DISTINCT cat.category_id) = (SELECT COUNT(*) FROM category);

-- 3. Write a SQL query to return the titles of all films in the database
-- that have been rented at least once but never returned.
SELECT f.title
FROM film f
         JOIN inventory i ON f.film_id = i.film_id
         JOIN rental r ON i.inventory_id = r.inventory_id
WHERE r.return_date IS NULL;

-- 4. Write a SQL query to return the names of all actors
-- who have appeared in at least one film in each category in the database.
SELECT a.first_name, a.last_name
FROM actor a
         JOIN film_actor fa ON a.actor_id = fa.actor_id
         JOIN film f ON fa.film_id = f.film_id
         JOIN film_category fc ON f.film_id = fc.film_id
         JOIN category c ON fc.category_id = c.category_id
GROUP BY a.actor_id, a.first_name, a.last_name
HAVING COUNT(DISTINCT c.category_id) = (SELECT COUNT(*) FROM category);

-- 5. Write a SQL query to return the names of all customers who have rented the same film
-- more than once in a single transaction, along with the number of times they rented it.
SELECT c.first_name, c.last_name, f.title, COUNT(*) AS rental_count
FROM customer c
         JOIN rental r ON c.customer_id = r.customer_id
         JOIN inventory i ON r.inventory_id = i.inventory_id
         JOIN film f ON i.film_id = f.film_id
GROUP BY c.customer_id, f.film_id, c.first_name, c.last_name, f.title
HAVING COUNT(*) > 1;

-- 6. Write a SQL query to return the total revenue generated by each actor in the database,
-- based on the rental fees of the films they have appeared in.
SELECT a.first_name, a.last_name, SUM(p.amount) AS total_revenue
FROM actor a
         JOIN film_actor fa ON a.actor_id = fa.actor_id
         JOIN film f ON fa.film_id = f.film_id
         JOIN inventory i ON f.film_id = i.film_id
         JOIN rental r ON i.inventory_id = r.inventory_id
         JOIN payment p ON r.rental_id = p.rental_id
GROUP BY a.actor_id, a.first_name, a.last_name;

-- 7. Write a SQL query to return the names of all actors who have appeared in at least one film
-- with a rating of 'R', but have never appeared in a film with a rating of 'G'.
SELECT a.first_name, a.last_name
FROM actor a
         JOIN film_actor fa ON a.actor_id = fa.actor_id
         JOIN film f ON fa.film_id = f.film_id
WHERE f.rating = 'R'
  AND a.actor_id NOT IN (
    SELECT fa2.actor_id
    FROM film_actor fa2
             JOIN film f2 ON fa2.film_id = f2.film_id
    WHERE f2.rating = 'G'
)
GROUP BY a.actor_id, a.first_name, a.last_name;

-- 8. Write a SQL query to return the titles of all films in the database that have been rented by more than 50 customers,
-- but have never been rented by the same customer more than once.
SELECT f.title
FROM film f
         JOIN inventory i ON f.film_id = i.film_id
         JOIN rental r ON i.inventory_id = r.inventory_id
         JOIN customer c ON r.customer_id = c.customer_id
GROUP BY f.film_id, f.title
HAVING COUNT(DISTINCT c.customer_id) > 50
   AND MAX(COUNT(c.customer_id)) = 1;

-- 9. Write a SQL query to return the names of all customers who have rented a film from a category
-- they have never rented from before.
SELECT DISTINCT c.first_name, c.last_name
FROM customer c
         JOIN rental r ON c.customer_id = r.customer_id
         JOIN inventory i ON r.inventory_id = i.inventory_id
         JOIN film f ON i.film_id = f.film_id
         JOIN film_category fc ON f.film_id = fc.film_id
         JOIN category cat ON fc.category_id = cat.category_id
WHERE NOT EXISTS (
    SELECT 1
    FROM rental r2
             JOIN inventory i2 ON r2.inventory_id = i2.inventory_id
             JOIN film f2 ON i2.film_id = f2.film_id
             JOIN film_category fc2 ON f2.film_id = fc2.film_id
    WHERE r2.customer_id = c.customer_id
      AND fc2.category_id = cat.category_id
      AND r2.rental_date < r.rental_date
);

-- 10. Write a SQL query to return the titles of all films in the database that have been rented by every customer
-- who has ever rented a film from the 'Action' category.
SELECT f.title
FROM film f
         JOIN inventory i ON f.film_id = i.film_id
         JOIN rental r ON i.inventory_id = r.inventory_id
         JOIN customer c ON r.customer_id = c.customer_id
WHERE NOT EXISTS (
    SELECT 1
    FROM customer c2
             JOIN rental r2 ON c2.customer_id = r2.customer_id
             JOIN inventory i2 ON r2.inventory_id = i2.inventory_id
             JOIN film f2 ON i2.film_id = f2.film_id
             JOIN film_category fc2 ON f2.film_id = fc2.film_id
             JOIN category cat2 ON fc2.category_id = cat2.category_id
    WHERE cat2.name = 'Action'
      AND c2.customer_id NOT IN (
        SELECT r3.customer_id
        FROM rental r3
                 JOIN inventory i3 ON r3.inventory_id = i3.inventory_id
        WHERE i3.film_id = f.film_id
    )
)
GROUP BY f.film_id, f.title;

-- LEVEL 3
-- 1. Write a SQL query to return the average rental duration for each combination of actor and category
-- in the database, excluding actors who have not appeared in any films in a category.
SELECT a.first_name, a.last_name, c.name AS category_name, AVG(f.rental_duration) AS average_rental_duration
FROM actor a
         JOIN film_actor fa ON a.actor_id = fa.actor_id
         JOIN film f ON fa.film_id = f.film_id
         JOIN film_category fc ON f.film_id = fc.film_id
         JOIN category c ON fc.category_id = c.category_id
GROUP BY a.actor_id, a.first_name, a.last_name, c.category_id, c.name
HAVING COUNT(f.film_id) > 0;

-- 2. Write a SQL query to return the names of all actors who have appeared in a film
-- with a rating of 'R' and a length of more than 2 hours, but have never appeared in a film with a rating of 'G'.
SELECT a.first_name, a.last_name
FROM actor a
         JOIN film_actor fa ON a.actor_id = fa.actor_id
         JOIN film f ON fa.film_id = f.film_id
WHERE f.rating = 'R' AND f.length > 120
  AND a.actor_id NOT IN (
    SELECT a2.actor_id
    FROM actor a2
             JOIN film_actor fa2 ON a2.actor_id = fa2.actor_id
             JOIN film f2 ON fa2.film_id = f2.film_id
    WHERE f2.rating = 'G'
)
GROUP BY a.actor_id, a.first_name, a.last_name;

-- 3. Write a SQL query to return the names of all customers who have rented more than 10 films
-- in a single transaction, along with the number of films they rented and the total rental fee.
SELECT c.first_name, c.last_name, COUNT(r.rental_id) AS film_count, SUM(p.amount) AS total_rental_fee
FROM customer c
         JOIN rental r ON c.customer_id = r.customer_id
         JOIN payment p ON r.rental_id = p.rental_id
GROUP BY c.customer_id, c.first_name, c.last_name, r.rental_date
HAVING COUNT(r.rental_id) > 10;

-- 4. Write a SQL query to return the names of all customers who have rented every film in a category, 
-- along with the total number of films rented and the total rental fee.
SELECT c.first_name, c.last_name, COUNT(r.rental_id) AS total_films_rented, SUM(p.amount) AS total_rental_fee
FROM customer c
         JOIN rental r ON c.customer_id = r.customer_id
         JOIN inventory i ON r.inventory_id = i.inventory_id
         JOIN film f ON i.film_id = f.film_id
         JOIN film_category fc ON f.film_id = fc.film_id
         JOIN category cat ON fc.category_id = cat.category_id
         JOIN payment p ON r.rental_id = p.rental_id
GROUP BY c.customer_id, c.first_name, c.last_name, cat.category_id
HAVING COUNT(DISTINCT f.film_id) = (
    SELECT COUNT(DISTINCT f2.film_id)
    FROM film f2
             JOIN film_category fc2 ON f2.film_id = fc2.film_id
    WHERE fc2.category_id = cat.category_id
);

-- 5. Write a SQL query to return the titles of all films in the database that have been rented by the same customer
-- more than once in a single day, along with the names of the customers who rented them and the number of times they were rented.
SELECT f.title, c.first_name, c.last_name, COUNT(r.rental_id) AS rental_count
FROM rental r
         JOIN inventory i ON r.inventory_id = i.inventory_id
         JOIN film f ON i.film_id = f.film_id
         JOIN customer c ON r.customer_id = c.customer_id
GROUP BY f.title, c.first_name, c.last_name, DATE(r.rental_date)
HAVING COUNT(r.rental_id) > 1;

-- 6. Write a SQL query to return the names of all actors who have appeared in at least one film with every other actor in the database, 
-- along with the number of films they appeared in together.
SELECT a1.first_name, a1.last_name, COUNT(fa1.film_id) AS film_count
FROM actor a1
         JOIN film_actor fa1 ON a1.actor_id = fa1.actor_id
         JOIN film f ON fa1.film_id = f.film_id
WHERE NOT EXISTS (
    SELECT a2.actor_id
    FROM actor a2
    WHERE a2.actor_id != a1.actor_id
      AND NOT EXISTS (
          SELECT 1
          FROM film_actor fa2
          WHERE fa2.actor_id = a2.actor_id
            AND fa2.film_id = fa1.film_id
      )
)
GROUP BY a1.actor_id, a1.first_name, a1.last_name;

-- 7. Write a SQL query to return the names of all customers who have rented at least one film from each category in the database,
-- along with the number of films rented from each category.
SELECT c.first_name, c.last_name, cat.name AS category_name, COUNT(f.film_id) AS films_rented
FROM customer c
         JOIN rental r ON c.customer_id = r.customer_id
         JOIN inventory i ON r.inventory_id = i.inventory_id
         JOIN film f ON i.film_id = f.film_id
         JOIN film_category fc ON f.film_id = fc.film_id
         JOIN category cat ON fc.category_id = cat.category_id
GROUP BY c.customer_id, c.first_name, c.last_name, cat.category_id, cat.name
HAVING COUNT(DISTINCT cat.category_id) = (SELECT COUNT(*) FROM category);

-- 8. Write a SQL query to return the titles of all films in the database that have been rented more than 100 times,
-- but have never been rented by any customer who has rented a film with a rating of 'G'.
SELECT f.title
FROM film f
         JOIN inventory i ON f.film_id = i.film_id
         JOIN rental r ON i.inventory_id = r.inventory_id
         JOIN customer c ON r.customer_id = c.customer_id
GROUP BY f.title, f.film_id
HAVING COUNT(r.rental_id) > 100
   AND NOT EXISTS (
    SELECT 1
    FROM rental r2
             JOIN inventory i2 ON r2.inventory_id = i2.inventory_id
             JOIN film f2 ON i2.film_id = f2.film_id
    WHERE r2.customer_id = c.customer_id
      AND f2.rating = 'G'
);

-- 9. Write a SQL query to return the names of all customers who have rented a film from a category they have never rented from before,
-- and have also never rented a film longer than 3 hours.
SELECT DISTINCT c.first_name, c.last_name
FROM customer c
         JOIN rental r ON c.customer_id = r.customer_id
         JOIN inventory i ON r.inventory_id = i.inventory_id
         JOIN film f ON i.film_id = f.film_id
         JOIN film_category fc ON f.film_id = fc.film_id
         JOIN category cat ON fc.category_id = cat.category_id
WHERE NOT EXISTS (
    SELECT 1
    FROM rental r2
             JOIN inventory i2 ON r2.inventory_id = i2.inventory_id
             JOIN film f2 ON i2.film_id = f2.film_id
             JOIN film_category fc2 ON f2.film_id = fc2.film_id
    WHERE r2.customer_id = c.customer_id
      AND fc2.category_id = cat.category_id
      AND r2.rental_date < r.rental_date
)
  AND NOT EXISTS (
    SELECT 1
    FROM rental r3
             JOIN inventory i3 ON r3.inventory_id = i3.inventory_id
             JOIN film f3 ON i3.film_id = f3.film_id
    WHERE r3.customer_id = c.customer_id
      AND f3.length > 180
);

-- 10. Write a SQL query to return the names of all actors who have appeared in a film with a rating of 'PG-13' and a length of more than 2 hours,
-- and have also appeared in a film with a rating of 'R' and a length of less than 90 minutes.
SELECT DISTINCT a.first_name, a.last_name
FROM actor a
         JOIN film_actor fa1 ON a.actor_id = fa1.actor_id
         JOIN film f1 ON fa1.film_id = f1.film_id
         JOIN film_actor fa2 ON a.actor_id = fa2.actor_id
         JOIN film f2 ON fa2.film_id = f2.film_id
WHERE (f1.rating = 'PG-13' AND f1.length > 120)
  AND (f2.rating = 'R' AND f2.length < 90);

-- LEVEL 4
-- 1. Write a SQL query to update the rental rate of all films in the database that have been rented more than 100 times,
-- setting the new rental rate to be 10% higher than the current rate.
UPDATE film f
SET f.rental_rate = f.rental_rate * 1.10
WHERE f.film_id IN (
    SELECT i.film_id
    FROM inventory i
             JOIN rental r ON i.inventory_id = r.inventory_id
    GROUP BY i.film_id
    HAVING COUNT(r.rental_id) > 100
);

-- 2. Write a SQL query to update the rental duration of all films in the database that have been rented more than 5 times,
-- setting the new duration to be 5% longer than the current duration.

UPDATE film f
SET f.rental_duration = ROUND(f.rental_duration * 1.05)
WHERE f.film_id IN (
    SELECT i.film_id
    FROM inventory i
             JOIN rental r ON i.inventory_id = r.inventory_id
    GROUP BY i.film_id
    HAVING COUNT(r.rental_id) > 5
);

-- 3. Write a SQL query to update the rental rate of all films in the 'Action' category that were released before the year 2005,
-- setting the new rate to be 20% higher than the current rate.
UPDATE film f
SET f.rental_rate = f.rental_rate * 1.20
WHERE f.film_id IN (
    SELECT f2.film_id
    FROM film f2
             JOIN film_category fc ON f2.film_id = fc.film_id
             JOIN category c ON fc.category_id = c.category_id
    WHERE c.name = 'Action'
      AND f2.release_year < 2005
);

-- 4. Write a SQL query to update the email address of all customers who have rented a film from the 'Horror' category in the month of October 2022,
-- setting the new email address to be a combination of their current email address and the string 'horrorlover'.
UPDATE customer c
SET c.email = CONCAT(c.email, '_horrorlover')
WHERE c.customer_id IN (
    SELECT DISTINCT r.customer_id
    FROM rental r
             JOIN inventory i ON r.inventory_id = i.inventory_id
             JOIN film f ON i.film_id = f.film_id
             JOIN film_category fc ON f.film_id = fc.film_id
             JOIN category cat ON fc.category_id = cat.category_id
    WHERE cat.name = 'Horror'
      AND r.rental_date BETWEEN '2022-10-01' AND '2022-10-31'
);

-- 5. Write a SQL query to update the rental rate of all films in the database that have been rented by more than 10 customers,
-- setting the new rate to be 5% higher than the current rate, but not higher than $4.00.
UPDATE film f
SET f.rental_rate = LEAST(f.rental_rate * 1.05, 4.00)
WHERE f.film_id IN (
    SELECT i.film_id
    FROM inventory i
             JOIN rental r ON i.inventory_id = r.inventory_id
             JOIN customer c ON r.customer_id = c.customer_id
    GROUP BY i.film_id
    HAVING COUNT(DISTINCT c.customer_id) > 10
);

-- 6. Write a SQL query to update the rental rate of all films in the database that have a rating of 'PG-13' and a length of more than 2 hours,
-- setting the new rate to be $3.50.
UPDATE film f
SET rental_rate = 3.50
WHERE rating = 'PG-13'
  AND length > 120;

-- 7. Write a SQL query to update the rental duration of all films in the 'Sci-Fi' category that were released in the year 2010,
-- setting the new duration to be equal to the length of the film in minutes.
UPDATE film f
SET f.rental_duration = f.length
WHERE f.film_id IN (
    SELECT f2.film_id
    FROM film f2
             JOIN film_category fc ON f2.film_id = fc.film_id
             JOIN category c ON fc.category_id = c.category_id
    WHERE c.name = 'Sci-Fi'
      AND f2.release_year = 2010
);

-- 8. Write a SQL query to update the address of all customers who live in the same city as another customer with the same last name,
-- setting the new address to be the concatenation of their current address and the string 'samecity'.
UPDATE customer c1
    JOIN address a1 ON c1.address_id = a1.address_id
    SET a1.address = CONCAT(a1.address, '_samecity')
WHERE EXISTS (
    SELECT 1
    FROM customer c2
    JOIN address a2 ON c2.address_id = a2.address_id
    WHERE c1.customer_id != c2.customer_id
  AND c1.last_name = c2.last_name
  AND a1.city_id = a2.city_id
    );

-- 9. Write a SQL query to update the rental rate of all films in the 'Comedy' category that were released in the year 2007 or later,
-- setting the new rate to be 15% lower than the current rate.
UPDATE film f
SET rental_rate = rental_rate * 0.85
WHERE film_id IN (
    -- Comedy films from 2007 or later
    SELECT fc.film_id
    FROM film_category fc
             JOIN category c ON fc.category_id = c.category_id
             JOIN film f2 ON fc.film_id = f2.film_id
    WHERE c.name = 'Comedy'
      AND f2.release_year >= 2007);

-- 10. Write a SQL query to update the rental rate of all films in the database that have a rating of 'G' and a length of less than 1 hour,
-- setting the new rate to be $1.50.
UPDATE film f
SET rental_rate = 1.50
WHERE rating = 'G'
  AND length < 60;