package com.dinhlap.javaspring.service.corejava1;

public interface Level4Service {
    /** Write a program that takes a list of integers as input and returns the minimum number of moves
    required to sort the list in ascending order using bubble sort.
    ƒê·∫ßu v√†o 1 d√£y s·ªë b·∫•t k·ª≥
    ƒê·∫ßu ra l√† s·ªë l·∫ßn l·∫∑p ƒë·ªÉ ho√†n th√†nh vi·ªác s·∫Øp x·∫øp n·ªïi b·ªçt
    G·ª£i √Ω: T√¨m hi·ªÉu v·ªÅ s·∫Øp x·∫øp n·ªïi b·ªçt ( bubble sort ). T√¨m s·ªë l·∫ßn s·∫Øp x·∫øp n·ªïi b·ªçt c·∫ßn ƒë·ªÉ ho√†n th√†nh
    vi·ªác s·∫Øp x·∫øp v·ªõi m·∫£ng ƒë·∫ßu v√†o
    VD: [3, 1, 4, 2, 6, 5] c·∫ßn 4 l·∫ßn s·∫Øp x·∫øp ƒë·ªÉ ho√†n th√†nh*/
    int minMoves(int[] arr);

    /** Write a program that takes a list of integers as input and returns the number of distinct
    subsequences of the list that sum up to a target value.
    VD:
    ƒê·∫ßu v√†o [1, 2, 3, 4, 5] v√† 5 üëâ 2 ( v√¨ 2 + 3 v√† 1 + 4 b·∫±ng 5 )
    ƒê·∫ßu v√†o [1, 1, 2, 3, 4] v√† 5 üëâ 4 ( v√¨ 4 t·ªï h·ª£p c√≥ t·ªïng b·∫±ng 5 )*/
    int countSubsequences(int[] arr, int target);
    
    /** Write a program that takes a list of strings as input and returns the length of the longest
    substring that appears in every string in the list.
            VD:
            ["abcdefg", "abcde", "abcdef", "ab", "abc"] => 2
            ["programming", "programmer", "program"] => 7
            ["hello", "world", "jelly"] => 1
            ["abcd", "ab", "abcd", "ab", "abcd"] => 2*/
    int longestCommonSubstring(String[] arr);
    
    /** Write a program that takes a list of integers as input and returns the maximum product of any 
    three distinct elements in the list.
    V√≠ d·ª•: [-10, -5, 0, 1, 2, 3, 4] üëâ 200 (t√≠ch c·ªßa -10, -5 v√† 4)*/
    int maxProduct(int[] arr);
    
    /** Write a program that takes a list of strings as input and returns the list sorted by the
    number of distinct words in each string, with the longest strings appearing first.
    (Khuy·∫øn kh√≠ch d√πng forEach v·ªõi javascript )
    S·∫Øp x·∫øp t·ª´ chu·ªói d√†i nh·∫•t ƒë·∫øn ng·∫Øn nh·∫•t, trong tr∆∞·ªùng h·ª£p c√≥ 2 chu·ªói c√πng ƒë·ªô d√†i th√¨ s·∫Øp
    x·∫øp theo th·ª© t·ª± b·∫£ng ch·ªØ c√°i
    V√≠ d·ª•: ['the quick brown fox', 'the lazy dog jumps over the fence', 'the cat in the hat']
    K·∫øt qu·∫£: ['the lazy dog jumps over the fence', 'the quick brown fox', 'the cat in the hat']*/
    String[] sortByLength(String[] arr);
    
    /** Write a program that takes a list of integers as input and returns the smallest positive 
    integer that cannot be represented as the sum of any subset of the list, with the additional 
    constraint that no subset can contain any consecutive integers. ( c√≥ th·ªÉ b·ªè qua )
    ƒê·∫ßu v√†o : m·ªôt m·∫£ng s·ªë b·∫•t k·ª≥
    ƒê·∫ßu ra: T√¨m ra s·ªë d∆∞∆°ng nh·ªè nh·∫•t v·ªõi ƒëi·ªÅu ki·ªán s·ªë ƒë√≥ kh√¥ng ph·∫£i l√† t·ªïng c·ªßa b·∫•t k·ª≥ t·∫≠p h·ª£p s·ªë n√†o
    trong m·∫£ng, c√°c t·∫≠p h·ª£p s·ªë kh√¥ng ƒë∆∞·ª£c ch·ª©a s·ªë nguy√™n li√™n ti·∫øp n√†o
    V√≠ d·ª•: [1, 2, 3, 7, 8, 20] => 4
    Gi·∫£i th√≠ch
    Ch·∫°y v√≤ng l·∫∑p t·ª´ 1 ƒë·∫øn s·ªë d∆∞∆°ng v√¥ c√πng:
    S·ªë 1 c√≥ trong m·∫£ng => lo·∫°i
    T∆∞∆°ng t·ª± v·ªõi 2 v√† 3
    S·ªë 4 kh√¥ng c√≥ trong m·∫£ng n√≥ l√† t·ªïng c·ªßa 1 v√† 3, nh∆∞ng 1 v√† 3 kh√¥ng ph·∫£i 2 s·ªë li√™n ti·∫øp n√™n k·∫øt qu√° l√† 4*/
    int smallestMissing(int[] arr);
    
    /** Write a program that takes a list of integers as input and returns the length of the longest increasing 
    subsequence of the numbers, with the additional constraint that no two adjacent elements in the subsequence
    can differ by more than 1. ( Khuy·∫øn kh√≠ch d√πng reduce )
    VD:
    ƒê·∫ßu v√†o: [1, 2, 3, 8, 6, 3] k·∫øt qu·∫£ 3
    ƒê·∫ßu v√†o: [1, 2, 3, 8, 3, 2, 4, 5, 6, 7, 8, 9] k·∫øt qu·∫£ 6*/
    int longestIncreasingSubsequence(int[] arr);
    
    /** Write a program that takes a list of strings as input and returns the two strings with the largest overlap
    of substrings, where the substrings must be at lea	st k characters long (where k is a parameter to the function).
    Gi·ªëng b√†i 2.3 nh∆∞ng th√™m bi·∫øn k l√† ƒë·ªô d√†i c√°c k√Ω t·ª± tr√πng*/
    String[] largestOverlap(String[] arr, int k);
}
